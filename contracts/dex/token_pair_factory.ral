Contract TokenPairFactory(
  pairTemplateId: ByteVec, // the template contract id of `TokenPair`
  mut pairSize: U256,
  mut feeSetter: Address,
  mut feeCollectorFactory: FeeCollectorFactory
) extends Constants() {
  event PairCreated(token0: ByteVec, token1: ByteVec, pair: ByteVec, currentPairSize: U256)

  @using(updateFields = true)
  pub fn setFeeCollectorFactory(factory: FeeCollectorFactory) -> () {
    checkCaller!(callerAddress!() == feeSetter, ErrorCodes.InvalidCaller)
    feeCollectorFactory = factory
  }

  @using(updateFields = true)
  pub fn updateFeeSetter(newFeeSetter: Address) -> () {
    checkCaller!(callerAddress!() == feeSetter, ErrorCodes.InvalidCaller)
    feeSetter = newFeeSetter
  }

  pub fn getFeeSetter() -> Address {
    return feeSetter
  }

  @using(preapprovedAssets = true)
  pub fn enableFeeCollector(tokenPair: TokenPair, alphAmount: U256) -> () {
    let caller = callerAddress!()
    checkCaller!(caller == feeSetter, ErrorCodes.InvalidCaller)
    let feeCollectorId = feeCollectorFactory.createFeeCollector{caller -> ALPH: alphAmount}(
      caller,
      alphAmount,
      tokenPair
    )
    tokenPair.setFeeCollectorId(feeCollectorId)
  }

  pub fn updateFeeCollector(tokenPair: TokenPair, newFeeCollectorId: ByteVec) -> () {
    checkCaller!(callerAddress!() == feeSetter, ErrorCodes.InvalidCaller)
    tokenPair.setFeeCollectorId(newFeeCollectorId)
  }

  fn sortTokens(tokenA: ByteVec, tokenB: ByteVec) -> (ByteVec, ByteVec) {
    let left = u256From32Byte!(tokenA)
    let right = u256From32Byte!(tokenB)
    if (left < right) {
      return tokenA, tokenB
    }
    return tokenB, tokenA
  }

  @using(preapprovedAssets = true, updateFields = true, checkExternalCaller = false)
  pub fn createPair(
    payer: Address,
    alphAmount: U256,
    tokenAId: ByteVec,
    tokenBId: ByteVec
  ) -> () {
    assert!(
      tokenRemaining!(payer, tokenAId) > 0 &&
      tokenRemaining!(payer, tokenBId) > 0,
      ErrorCodes.TokenNotExist
    )
    assert!(tokenAId != tokenBId, ErrorCodes.IdenticalTokenIds)
    let (token0Id, token1Id) = sortTokens(tokenAId, tokenBId)
    let (encodedImmFields, encodedMutFields) = TokenPair.encodeFields!(
      TokenPairFactory(selfContractId!()),
      token0Id,
      token1Id,
      0, // reserve0
      0, // reserve1
      0, // blockTimeStampLast
      0, // price0CumulativeLast
      0, // price1CumulativeLast
      0, // totalSupply
      0, // kLast
      #  // feeCollectorId
    )
    let pairId = copyCreateSubContractWithToken!{payer -> ALPH: alphAmount}(
      token0Id ++ token1Id,
      pairTemplateId,
      encodedImmFields,
      encodedMutFields,
      1 << 255
    )

    emit PairCreated(token0Id, token1Id, pairId, pairSize)

    pairSize = pairSize + 1
  }
}
